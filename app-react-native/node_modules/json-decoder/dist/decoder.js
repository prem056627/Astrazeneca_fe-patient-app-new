"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.valueDecoder = exports.anyDecoder = exports.objectDecoder = exports.exactDecoder = exports.allOfDecoders = exports.oneOfDecoders = exports.arrayDecoder = exports.undefinedDecoder = exports.nullDecoder = exports.boolDecoder = exports.numberDecoder = exports.stringDecoder = exports.decoder = exports.err = exports.ok = exports.ERR = exports.OK = void 0;
exports.OK = "OK";
exports.ERR = "ERR";
var ok = function (value) { return ({
    type: exports.OK,
    value: value,
    map: function (func) {
        try {
            return (0, exports.ok)(func(value));
        }
        catch (error) {
            return (0, exports.err)(error.message);
        }
    },
}); };
exports.ok = ok;
var err = function (message) { return ({
    type: exports.ERR,
    message: message,
    map: function () { return (0, exports.err)(message); },
}); };
exports.err = err;
var decoder = function (decode) { return ({
    decode: decode,
    decodeAsync: function (a) {
        return new Promise(function (resolve, reject) {
            var res = decode(a);
            switch (res.type) {
                case exports.OK:
                    return resolve(res.value);
                case exports.ERR:
                    return reject(new Error(res.message));
            }
        });
    },
    map: function (func) {
        return (0, exports.decoder)(function (b) { return decode(b).map(func); });
    },
    bind: function (getNextDecoder) {
        return (0, exports.decoder)(function (a) {
            var res = decode(a);
            switch (res.type) {
                case exports.OK:
                    var nextDecoder = getNextDecoder(res.value);
                    return nextDecoder.decode(res.value);
                case exports.ERR:
                    return (0, exports.err)(res.message);
            }
        });
    },
    then: function (nextDecoder) {
        return (0, exports.allOfDecoders)((0, exports.decoder)(decode), nextDecoder);
    },
    validate: function (func, errMessage) {
        if (errMessage === void 0) { errMessage = "validation failed"; }
        return (0, exports.decoder)(decode).map(function (t) {
            if (func(t)) {
                return t;
            }
            else {
                throw new Error(typeof errMessage === "function" ? errMessage(t) : errMessage);
            }
        });
    },
}); };
exports.decoder = decoder;
exports.stringDecoder = (0, exports.decoder)(function (a) {
    return typeof a === "string"
        ? (0, exports.ok)(a)
        : (0, exports.err)("expected string, got ".concat(typeof a));
});
exports.numberDecoder = (0, exports.decoder)(function (a) {
    return typeof a === "number"
        ? (0, exports.ok)(a)
        : (0, exports.err)("expected number, got ".concat(typeof a));
});
exports.boolDecoder = (0, exports.decoder)(function (a) {
    return typeof a === "boolean"
        ? (0, exports.ok)(a)
        : (0, exports.err)("expected boolean, got ".concat(typeof a));
});
exports.nullDecoder = (0, exports.decoder)(function (a) {
    return a === null ? (0, exports.ok)(null) : (0, exports.err)("expected null, got ".concat(typeof a));
});
exports.undefinedDecoder = (0, exports.decoder)(function (a) {
    return a === undefined
        ? (0, exports.ok)(undefined)
        : (0, exports.err)("expected undefined, got ".concat(typeof a));
});
var arrayDecoder = function (itemDecoder) {
    return (0, exports.decoder)(function (a) {
        var e_1, _a;
        if (Array.isArray(a)) {
            var res = [];
            try {
                for (var _b = __values(a.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), index = _d[0], item = _d[1];
                    var itemResult = itemDecoder.decode(item);
                    switch (itemResult.type) {
                        case exports.OK: {
                            res.push(itemResult.value);
                            continue;
                        }
                        case exports.ERR:
                            return (0, exports.err)("array item ".concat(index, ": ").concat(itemResult.message));
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return (0, exports.ok)(res);
        }
        else
            return (0, exports.err)("expected array, got ".concat(typeof a));
    });
};
exports.arrayDecoder = arrayDecoder;
var oneOfDecoders = function () {
    var decoders = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        decoders[_i] = arguments[_i];
    }
    return (0, exports.decoder)(function (a) {
        var e_2, _a;
        try {
            for (var decoders_1 = __values(decoders), decoders_1_1 = decoders_1.next(); !decoders_1_1.done; decoders_1_1 = decoders_1.next()) {
                var decoderTry = decoders_1_1.value;
                var result = decoderTry.decode(a);
                if (result.type === exports.OK)
                    return (0, exports.ok)(result.value);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (decoders_1_1 && !decoders_1_1.done && (_a = decoders_1.return)) _a.call(decoders_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return (0, exports.err)("one of: none of decoders match");
    });
};
exports.oneOfDecoders = oneOfDecoders;
var allOfDecoders = function () {
    var decoders = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        decoders[_i] = arguments[_i];
    }
    return (0, exports.decoder)(function (a) {
        return decoders.reduce(function (result, decoderNext) {
            return result.type === exports.OK
                ? decoderNext.decode(result.value)
                : (0, exports.err)(result.message);
        }, (0, exports.ok)(a));
    });
};
exports.allOfDecoders = allOfDecoders;
var exactDecoder = function (value) {
    return (0, exports.decoder)(function (a) {
        return a === value ? (0, exports.ok)(value) : (0, exports.err)("not exactly ".concat(value));
    });
};
exports.exactDecoder = exactDecoder;
var objectDecoder = function (decoderMap) {
    return (0, exports.decoder)(function (a) {
        var e_3, _a;
        if (typeof a === "object" && a !== null) {
            var keys = Object.keys(decoderMap);
            var res = {};
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    var fieldResult = decoderMap[key].decode(a[key]);
                    switch (fieldResult.type) {
                        case exports.OK: {
                            res[key] = fieldResult.value;
                            continue;
                        }
                        case exports.ERR:
                            return (0, exports.err)("".concat(String(key), ": ").concat(fieldResult.message));
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return (0, exports.ok)(res);
        }
        else
            return (0, exports.err)("expected object, got ".concat(a ? typeof a : null));
    });
};
exports.objectDecoder = objectDecoder;
exports.anyDecoder = (0, exports.decoder)(function (a) { return (0, exports.ok)(a); });
var valueDecoder = function (value) {
    return (0, exports.decoder)(function (a) { return (0, exports.ok)(value); });
};
exports.valueDecoder = valueDecoder;
